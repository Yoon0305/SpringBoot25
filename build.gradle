buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
 }/* Query DSL setting*/

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.7'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.mbc'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    /* maven repository 에서 code 가져와서 refresh(코끼리 버튼)으로 가져온다 */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'      /* 데이터 베이스 관련 외부 라이브러리*/
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'     /* 프론트 관련 외부 라이브러리*/
    // https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'     /* thymeleaf layout 관련 외부 라이브러리*/
    implementation 'org.springframework.boot:spring-boot-starter-web'           /* string-web*/
    compileOnly 'org.projectlombok:lombok'                                      /* lombok*/
    annotationProcessor 'org.projectlombok:lombok'                              /* lombok*/
    testCompileOnly 'org.projectlombok:lombok'                                  /* lombok*/
    testAnnotationProcessor 'org.projectlombok:lombok'                          /* lombok*/

    /*DTO와 Entity간의 변환처리용 P468*/
    // https://mvnrepository.com/artifact/org.modelmapper/modelmapper
    implementation 'org.modelmapper:modelmapper:3.1.0'
    /* 과거에는 Entity <-> DTO 를 서로 변환해서 사용하는 경우가 많았음 */
    /* Project에 config라는 환경 설정용 package를 만들고 RootConfig라는 클래스를 만들어서 사용한다. */


    developmentOnly 'org.springframework.boot:spring-boot-devtools'             /* boot dev-tool*/
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"

    annotationProcessor(
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

    /* 1단계, 2단계 설정 -> src/main/resources/application.properties 에서 설정   */

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'                          /* maria db driver*/
    testImplementation 'org.springframework.boot:spring-boot-starter-test'      /* junit, method test*/
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'                /* junit launcher (junit 실행코드)*/
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {

    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}
/* Query DSL 사용법 -> 우측의 Gradle 메뉴에서 other를 찾아서 compileJava task 실행 */
/* 하단에 compile 완료 확인 -> build -> generated -> main -> domain -> Q로 시작하는 클래스 확인
*  쿼리 dsl용 객체 이므로, 임의로 커스텀하면 안됨.
*  **********주의 : Entity or DTO를 변경하면 Qdomain을 다시 생성해야 한다.      
*  삭제 : 우측 Gradle 메뉴 -> Tasks -> build -> clean 후 재 생성  */

compileJava.dependsOn('clean')